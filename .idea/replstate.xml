<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459903801040">{:repl-history {:ide [], :local [&quot;(use 'hl7-scraper.helpers)&quot; &quot;(defn fetch-url\n  \&quot;Uses CGrands Enlive Library to fetch html content and return in a map format\&quot;\n  [url]\n  (-&gt;&gt;\n    (java.net.URL.)\n    (html/html-resource)\n    (swallow-exceptions)))&quot; &quot;(defn fetch-url [url]\n  (swallow-exceptions (html/html-resource (java.net.URL url))))&quot; &quot;(fetch-url hl7-scraper.hl7-constants/hl7-key-tree)&quot; &quot;(html/html-resource hl7-scraper.hl7-constants/hl7-key-tree)&quot; &quot; hl7-scraper.hl7-constants/hl7-key-tree&quot; &quot;(html/html-resource (java.net.URL hl7-scraper.hl7-constants/hl7-key-tree))&quot; &quot;(defmacro swallow-exceptions [&amp; body]\n  \&quot;Capture Exceptions and returns nil if exception met\&quot;\n  `(try ~@body (catch Exception e#)))&quot; &quot;(use 'hl7-scraper.hl7-helpers)&quot; &quot;(require [net.cgrand.enlive-html :as html])&quot; &quot;(require '[net.cgrand.enlive-html :as html])&quot; &quot;(defn fetch-from-url [url]\n  (-&gt;&gt; url\n       (java.net.URL.)\n       (html/html-resource)\n       (swallow-exceptions)))&quot; &quot;(use 'hl7-scraper.hl7-constants)&quot; &quot;(fetch-from-url hl7-scraper.hl7-constants/hl7-key-tree)&quot; &quot;(defn fetch-hl7-tree [] (fetch-from-url hl7-scraper.hl7-constants/hl7-key-tree))&quot; &quot;(+ 1 1)&quot; &quot;(defn get-hl7-key-list []\n  (html/select (fetch-hl7-tree) [:div.block :ul :li]))&quot; &quot;(defn get-hl7-key-list []\n  (html/select [:div.block :ul :li] (fetch-hl7-tree)))&quot; &quot;(fetch-from-url)&quot; &quot;(fetch-hl7-tree)&quot; &quot;(html/select (fetch-hl7-tree) [:li :li :li :li :a])&quot; &quot;(defn get-hl7-key-list []\n  (html/select (fetch-hl7-tree) [:li :li :li :li :a]))&quot; &quot;(defn get-hl7-key-list []\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map #(:content %))))&quot; &quot;(defn get-hl7-key-list []\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map #(:content %))\n       (map #(nth % 0))))&quot; &quot;(defn get-hl7-key-list []\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map #(:content %))\n       (map #(nth % 0))\n       (map #(:content %))))&quot; &quot;(defn get-hl7-key-list []\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map #(:content %))\n       (map #(nth % 0))\n       (map #(:content %))\n       (map #(first %))))&quot; &quot;(def hl7-key-list\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map #(:content %))\n       (map #(first %))\n       (map #(:content %))\n       (map #(first %))))&quot; &quot;(def hl7-key-list (get-hl7-key-list))&quot; &quot;hl7-key-list&quot; &quot;(defn make-ver-list []\n  (map #(str \&quot;v2\&quot; %) (range 1 7)))&quot; &quot;(def ver-list (make-ver-list))&quot; &quot;ver-list&quot; &quot;(zipmap ver-list hl7-key-list)&quot; &quot;(defn build-schema []\n  (-&gt;&gt; ver-list\n       (reduce #(assoc %1 %2 0) {})))&quot; &quot;(build-schema)&quot; &quot;(defn get-hl7-key-list []\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map #(:content %))\n       (map #(first %))\n       (map #(:content %))\n       (map #(first %))\n       (map #(keyword %)))&quot; &quot;(defn get-hl7-key-list []\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map #(:content %))\n       (map #(first %))\n       (map #(:content %))\n       (map #(first %))\n       (map #(keyword %))))&quot; &quot;(defn make-ver-list []\n  (-&gt;&gt; (range 1 7)\n       (map #(str \&quot;v2\&quot; %))\n       (map #(keyword %)))&quot; &quot;(defn make-ver-list []\n  (-&gt;&gt; (range 1 7)\n       (map #(str \&quot;v2\&quot; %))\n       (map #(keyword %))))&quot; &quot;(def hl7-key-list (get-hl7-key-list))\n\n(def ver-list (make-ver-list))&quot; &quot;(reduce\n  (fn [acc ver]\n    (assoc acc ver\n               (reduce\n                 (fn [acc hl7-key]\n                   (assoc acc hl7-key 0)) {} hl7-key-list))) {} ver-list)&quot; &quot;(def base-url\n  \&quot;http://hl7api.sourceforge.net/[ver]/apidocs/ca/uhn/hl7v2/model/[ver]/segment/(key).html\&quot;)&quot; &quot;(defn transform-ui [ver hl7-key]\n  (-&gt; base-url\n      (clojure.string/replace (re-pattern \&quot;\\\\[\\\\w+\\\\]\&quot;) ver)\n      (clojure.string/replace (re-pattern \&quot;\\\\(\\\\w+\\\\)\&quot;) hl7-key)))&quot; &quot;(transform-ui \&quot;v21\&quot; \&quot;ACC\&quot;)&quot; &quot;(defn get-data [ver]\n  (-&gt;&gt; hl7-key-list\n       (map #(transform-url ver %))\n       (map #(fetch-from-url %)))&quot; &quot;(defn get-hl7-key-list []\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map #(:content %))\n       (map #(first %))\n       (map #(:content %))\n       (map #(first %))))&quot; &quot;(defn transform-url [ver hl7-key]\n  (-&gt; base-url\n      (clojure.string/replace (re-pattern \&quot;\\\\[\\\\w+\\\\]\&quot;) ver)\n      (clojure.string/replace (re-pattern \&quot;\\\\(\\\\w+\\\\)\&quot;) hl7-key)))&quot; &quot;(defn get-data [ver]\n  (-&gt;&gt; hl7-key-list\n       (map #(transform-url ver %))\n       (map #(fetch-from-url %))))&quot; &quot;(hl7-key-list)&quot; &quot;(defn get-data [ver]\n  (-&gt;&gt; (get-hl7-key-list)\n       (map #(transform-url ver %))\n       (map #(fetch-from-url %))))&quot; &quot;(defn get-data [ver]\n  (-&gt;&gt; (get-hl7-key-list)\n       (map #(transform-url ver %))\n       (reduce #(assoc %1 %2 0) {} )))&quot; &quot;(defn make-urls [ver]\n  (-&gt;&gt; (get-hl7-key-list)\n       (map #(transform-url ver %))))&quot; &quot;(make-urls)&quot; &quot;(make-urls \&quot;v21\&quot;)&quot; &quot;(defn get-data [ver]\n  (assoc {} ver\n            (reduce (fn [acc key]\n                      (assoc acc key 0)) {} (get-hl7-key-list))))&quot; &quot;(get-data \&quot;v21\&quot;)&quot; &quot;(fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;))&quot; &quot;(-&gt; )&quot; &quot;(-&gt; (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;))\n    (html/select [:div.block :ul :li]))&quot; &quot;(def matcher\n  (re-pattern \&quot;((\\\\w{3})-(\\\\d\\\\d?)):\\\\s(.+)\\\\s\\\\((\\\\w{2,3})\\\\)\&quot;))&quot; &quot;(defn regex-it [str]\n  (re-seq matcher str))&quot; &quot;(-&gt;&gt; (html/select (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;)) [:div.block :ul :li])\n     (map #(:content %))\n     (map #(first %))\n     (map #(regex-it %)))&quot; &quot;(-&gt;&gt; (html/select (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;)) [:div.block :ul :li])\n     (map #(:content %))\n     (map #(first %))\n     (map #(first %))\n     (map #(regex-it %)))&quot; &quot;(-&gt;&gt; (html/select (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;)) [:div.block :ul :li])\n     (map #(:content %))\n     (map #(first %)))&quot; &quot;(-&gt;&gt; (html/select (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;)) [:div.block :ul :li])\n     (map #(:content %))\n     (map #(first %))\n     (map #(regex-it %))\n     (map #(first %)))&quot; &quot;(-&gt;&gt; (html/select (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;)) [:div.block :ul :li])\n     (map #(:content %))\n     (map #(first %))\n     (map #(regex-it %))\n     (map #(first %))\n     (reduce\n       (fn [obj row]\n         (assoc obj (nth row 3) {:type (nth row 4) :code (nth row 5)})) {}))&quot; &quot;(-&gt;&gt; (html/select (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;BLG\&quot;)) [:div.block :ul :li])\n     (map #(:content %))\n     (map #(first %))\n     (map #(regex-it %))\n     (map #(first %))\n     (reduce\n       (fn [obj row]\n         (assoc obj (nth row 3) {:type (nth row 4) :code (nth row 5)})) {}))&quot; &quot;(defn get-data [ver key]\n  (-&gt;&gt; (html/select (fetch-from-url (transform-url ver key)) [:div.block :ul :li])\n       (map #(:content %))\n       (map #(first %))\n       (map #(regex-it %))\n       (map #(first %))))&quot; &quot;(get-data \&quot;v21\&quot; \&quot;ACC\&quot;)&quot; &quot;(get-data \&quot;v21\&quot; \&quot;BLG\&quot;)&quot; &quot;\n(defn get-data [ver key]\n  (-&gt;&gt; (html/select (fetch-from-url (transform-url ver key)) [:div.block :ul :li])\n       (map #(:content %))\n       (map #(first %))\n       (map #(regex-it %))\n       (map #(first %)))\n  (reduce\n    (fn [obj row]\n      (assoc obj (nth row 3) {:type (nth row 4) :code (nth row 5)})) {}))&quot; &quot;\n(defn get-data [ver key]\n  (-&gt;&gt; (html/select (fetch-from-url (transform-url ver key)) [:div.block :ul :li])\n       (map #(:content %))\n       (map #(first %))\n       (map #(regex-it %))\n       (map #(first %))))\n&quot; &quot;(defn get-data [ver key]\n  (let [raw (-&gt;&gt; (html/select (fetch-from-url (transform-url ver key)) [:div.block :ul :li])\n                 (map #(:content %))\n                 (map #(first %))\n                 (map #(regex-it %))\n                 (map #(first %)))]\n    (assoc {} key\n              (reduce\n                (fn [obj row]\n                  (assoc obj (nth row 3) {:type (nth row 4) :code (nth row 5)})) {} raw))))&quot; &quot;(defn parse-int [s]\n  (Integer. (re-find  #\&quot;\\d+\&quot; s )))&quot; &quot;(defn get-data [ver key]\n  (let [raw (-&gt;&gt; (html/select (fetch-from-url (transform-url ver key)) [:div.block :ul :li])\n                 (map #(:content %))\n                 (map #(first %))\n                 (map #(regex-it %))\n                 (map #(first %)))]\n    (assoc {} key\n              (reduce\n                (fn [obj row]\n                  (assoc obj (parse-int (nth row 3)) {:type (nth row 4) :code (nth row 5)})) {} raw))))&quot; &quot;(get-data \&quot;v21\&quot; \&quot;URS\&quot;)&quot; &quot;(defn get-data [ver key]\n  (let [raw (-&gt;&gt; (html/select\n                   (fetch-from-url\n                     (transform-url ver key)) [:div.block :ul :li])\n                 (map #(:content %))\n                 (map #(first %))\n                 (map #(regex-it %))\n                 (map #(first %)))]\n    (assoc {} key\n              (reduce\n                (fn [obj row]\n                  (assoc obj (nth row 3) {:type (nth row 4) :code (nth row 5)})) {} raw))))&quot; &quot;(map #(get-data \&quot;v21\&quot; %)(get-hl7-key-list))&quot; &quot; (first *1)&quot; &quot;(apply merge *2)&quot; &quot;(defn get-by-ver [ver]\n  (apply merge (map #(get-data ver %)(get-hl7-key-list))))&quot; &quot;(defn get-by-ver [ver]\n  (assoc {} ver (apply merge (map #(get-data ver %)(get-hl7-key-list)))))&quot; &quot;(get-by-ver \&quot;v21\&quot;)&quot; &quot;(ver-list)&quot; &quot;(map #(get-by-ver %)(ver-list))&quot; &quot;(map #(get-by-ver %)(make-ver-list))&quot; &quot;(apply merge *1)&quot; &quot;(spit \&quot;hl7.edn\&quot; (print-str *1))&quot; &quot;(defn retrieve-hl7 []\n  (map #(get-by-ver %)(ver-list)))&quot; &quot;(defn retrieve-hl7 []\n  (map #(get-by-ver %)(make-ver-list)))&quot; &quot;(defn retrieve-hl7 []\n  (apply merge (map #(get-by-ver %)(make-ver-list))))&quot; &quot;(retrieve-hl7)&quot; &quot;\n(defn get-hl7-key-list []\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map #(:content %))\n       (map #(first %))\n       (map #(:content %))\n       (map #(first %))))\n&quot; &quot;(get-hl7-key-list)&quot; &quot;(defn make-ver-list []\n  (-&gt;&gt; (range 1 7)\n       (map #(str \&quot;v2\&quot; %))))&quot; &quot;(make-ver-list)&quot; &quot;(use 'hl7-scraper.core)&quot; &quot;(main-)&quot;], :remote []}}</component>
</project>