<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459950983177">{:repl-history {:ide [], :local [&quot;(get-data \&quot;v21\&quot;)&quot; &quot;(fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;))&quot; &quot;(-&gt; )&quot; &quot;(-&gt; (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;))\n    (html/select [:div.block :ul :li]))&quot; &quot;(def matcher\n  (re-pattern \&quot;((\\\\w{3})-(\\\\d\\\\d?)):\\\\s(.+)\\\\s\\\\((\\\\w{2,3})\\\\)\&quot;))&quot; &quot;(defn regex-it [str]\n  (re-seq matcher str))&quot; &quot;(-&gt;&gt; (html/select (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;)) [:div.block :ul :li])\n     (map #(:content %))\n     (map #(first %))\n     (map #(regex-it %)))&quot; &quot;(-&gt;&gt; (html/select (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;)) [:div.block :ul :li])\n     (map #(:content %))\n     (map #(first %))\n     (map #(first %))\n     (map #(regex-it %)))&quot; &quot;(-&gt;&gt; (html/select (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;)) [:div.block :ul :li])\n     (map #(:content %))\n     (map #(first %)))&quot; &quot;(-&gt;&gt; (html/select (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;)) [:div.block :ul :li])\n     (map #(:content %))\n     (map #(first %))\n     (map #(regex-it %))\n     (map #(first %)))&quot; &quot;(-&gt;&gt; (html/select (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;ACC\&quot;)) [:div.block :ul :li])\n     (map #(:content %))\n     (map #(first %))\n     (map #(regex-it %))\n     (map #(first %))\n     (reduce\n       (fn [obj row]\n         (assoc obj (nth row 3) {:type (nth row 4) :code (nth row 5)})) {}))&quot; &quot;(-&gt;&gt; (html/select (fetch-from-url (transform-url \&quot;v21\&quot; \&quot;BLG\&quot;)) [:div.block :ul :li])\n     (map #(:content %))\n     (map #(first %))\n     (map #(regex-it %))\n     (map #(first %))\n     (reduce\n       (fn [obj row]\n         (assoc obj (nth row 3) {:type (nth row 4) :code (nth row 5)})) {}))&quot; &quot;(defn get-data [ver key]\n  (-&gt;&gt; (html/select (fetch-from-url (transform-url ver key)) [:div.block :ul :li])\n       (map #(:content %))\n       (map #(first %))\n       (map #(regex-it %))\n       (map #(first %))))&quot; &quot;(get-data \&quot;v21\&quot; \&quot;ACC\&quot;)&quot; &quot;(get-data \&quot;v21\&quot; \&quot;BLG\&quot;)&quot; &quot;\n(defn get-data [ver key]\n  (-&gt;&gt; (html/select (fetch-from-url (transform-url ver key)) [:div.block :ul :li])\n       (map #(:content %))\n       (map #(first %))\n       (map #(regex-it %))\n       (map #(first %)))\n  (reduce\n    (fn [obj row]\n      (assoc obj (nth row 3) {:type (nth row 4) :code (nth row 5)})) {}))&quot; &quot;\n(defn get-data [ver key]\n  (-&gt;&gt; (html/select (fetch-from-url (transform-url ver key)) [:div.block :ul :li])\n       (map #(:content %))\n       (map #(first %))\n       (map #(regex-it %))\n       (map #(first %))))\n&quot; &quot;(defn get-data [ver key]\n  (let [raw (-&gt;&gt; (html/select (fetch-from-url (transform-url ver key)) [:div.block :ul :li])\n                 (map #(:content %))\n                 (map #(first %))\n                 (map #(regex-it %))\n                 (map #(first %)))]\n    (assoc {} key\n              (reduce\n                (fn [obj row]\n                  (assoc obj (nth row 3) {:type (nth row 4) :code (nth row 5)})) {} raw))))&quot; &quot;(defn parse-int [s]\n  (Integer. (re-find  #\&quot;\\d+\&quot; s )))&quot; &quot;(defn get-data [ver key]\n  (let [raw (-&gt;&gt; (html/select (fetch-from-url (transform-url ver key)) [:div.block :ul :li])\n                 (map #(:content %))\n                 (map #(first %))\n                 (map #(regex-it %))\n                 (map #(first %)))]\n    (assoc {} key\n              (reduce\n                (fn [obj row]\n                  (assoc obj (parse-int (nth row 3)) {:type (nth row 4) :code (nth row 5)})) {} raw))))&quot; &quot;(get-data \&quot;v21\&quot; \&quot;URS\&quot;)&quot; &quot;(defn get-data [ver key]\n  (let [raw (-&gt;&gt; (html/select\n                   (fetch-from-url\n                     (transform-url ver key)) [:div.block :ul :li])\n                 (map #(:content %))\n                 (map #(first %))\n                 (map #(regex-it %))\n                 (map #(first %)))]\n    (assoc {} key\n              (reduce\n                (fn [obj row]\n                  (assoc obj (nth row 3) {:type (nth row 4) :code (nth row 5)})) {} raw))))&quot; &quot;(map #(get-data \&quot;v21\&quot; %)(get-hl7-key-list))&quot; &quot; (first *1)&quot; &quot;(apply merge *2)&quot; &quot;(defn get-by-ver [ver]\n  (apply merge (map #(get-data ver %)(get-hl7-key-list))))&quot; &quot;(defn get-by-ver [ver]\n  (assoc {} ver (apply merge (map #(get-data ver %)(get-hl7-key-list)))))&quot; &quot;(get-by-ver \&quot;v21\&quot;)&quot; &quot;(ver-list)&quot; &quot;(map #(get-by-ver %)(ver-list))&quot; &quot;(map #(get-by-ver %)(make-ver-list))&quot; &quot;(apply merge *1)&quot; &quot;(spit \&quot;hl7.edn\&quot; (print-str *1))&quot; &quot;(defn retrieve-hl7 []\n  (map #(get-by-ver %)(ver-list)))&quot; &quot;(defn retrieve-hl7 []\n  (map #(get-by-ver %)(make-ver-list)))&quot; &quot;\n(defn get-hl7-key-list []\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map #(:content %))\n       (map #(first %))\n       (map #(:content %))\n       (map #(first %))))\n&quot; &quot;(make-ver-list)&quot; &quot;(use 'hl7-scraper.core)&quot; &quot;(main-)&quot; &quot;(re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;)&quot; &quot;(re-seq (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;) \&quot;v21\&quot;)&quot; &quot;(Float. (clojure.string/join \&quot;.\&quot; (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;)))&quot; &quot;(Float. (clojure.string/join \&quot;.\&quot; (re-seq  (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;) \&quot;v21\&quot;)))&quot; &quot;(re-seq  (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;) \&quot;v21\&quot;))&quot; &quot;(re-seq  (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;) \&quot;v21\&quot;)&quot; &quot;(first *1)&quot; &quot;(re-matches  (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;) \&quot;v21\&quot;)&quot; &quot;(rest (re-matches  (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;) \&quot;v21\&quot;))&quot; &quot;(join \&quot;,\&quot; (rest (re-matches  (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;) \&quot;v21\&quot;)))&quot; &quot;(clojure.string/join \&quot;,\&quot; (rest (re-matches  (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;) \&quot;v21\&quot;)))&quot; &quot;(clojure.string/join \&quot;.\&quot; (rest (re-matches  (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;) \&quot;v21\&quot;)))&quot; &quot;(-&gt;&gt; (re-matches  (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;) \&quot;v21\&quot;)\n     (rest)\n     (clojure.string/join \&quot;.\&quot;))&quot; &quot;(-&gt;&gt; (re-matches  (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;) \&quot;v21\&quot;)\n     (rest)\n     (clojure.string/join \&quot;.\&quot;)\n     (Float.))&quot; &quot;(use 'hl7-scraper.hl7-helpers)&quot; &quot;(defmacro swallow-exceptions [&amp; body]\n  \&quot;Capture Exceptions and returns nil if exception met\&quot;\n  `(try ~@body (catch Exception e#)))&quot; &quot;(defn fetch-from-url [url]\n  (-&gt;&gt; url\n       (java.net.URL.)\n       (html/html-resource)\n       (swallow-exceptions)))&quot; &quot;(defn get-data [ver key]\n  (let [raw (-&gt;&gt; (html/select\n                   (fetch-from-url\n                     (transform-url ver key)) [:div.block :ul :li])\n                 (map #(:content %))\n                 (map #(first %))\n                 (map #(rex/regex-it %))\n                 (map #(first %)))]\n    (assoc {} key\n              (reduce\n                (fn [obj row]\n                  (assoc obj (parse-int (nth row 3)) {:type (nth row 4) :code (nth row 5)})) {} raw))))&quot; &quot;(defn get-hl7-key-list []\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map #(:content %))\n       (map #(first %))\n       (map #(:content %))\n       (map #(first %))))&quot; &quot;(defn make-ver-list []\n  (-&gt;&gt; (range 1 7)\n       (map #(str \&quot;v2\&quot; %))))\n&quot; &quot;(defn get-data [ver key]\n  (let [raw (-&gt;&gt; (html/select\n                   (fetch-from-url\n                     (transform-url ver key)) [:div.block :ul :li])\n                 (map #(:content %))\n                 (map #(first %))\n                 (map #(rex/regex-it %))\n                 (map #(first %)))]\n    (assoc {} key\n              (reduce\n                (fn [obj row]\n                  (assoc obj (swallow-exceptions (parse-int (nth row 3)) ) {:type (nth row 4) :code (nth row 5)})) {} raw))))&quot; &quot;(spit \&quot;hl7.end\&quot; (print-str *1))&quot; &quot;(spit \&quot;hl7.edn\&quot; (print-str *2))&quot; &quot;(require 'hl7-scraper.helpers)&quot; &quot;(use 'hl7-scraper.helpers)&quot; &quot;(use '[hl7-scraper.helpers :as helpr])&quot; &quot;(:require [net.cgrand.enlive-html :as html]\n  [hl7-scraper.hl7-constants :as const]\n  [hl7-scraper.hl7-regexer :as rex])&quot; &quot;(use '[net.cgrand.enlive-html :as html])&quot; &quot;(use '[hl7-scraper.hl7-constants :as const])&quot; &quot;(use '[hl7-scraper.hl7-regexer :as rex])&quot; &quot;(defmacro swallow-exceptions [&amp; body]\n  \&quot;Capture Exceptions and returns nil if exception met\&quot;\n  `(try ~@body (catch Exception e#)))\n&quot; &quot;(defn parse-int [s]\n  (Integer. s))&quot; &quot;(defn ver-to-float [ver]\n  (-&gt;&gt; (re-matches  (re-pattern \&quot;v(\\\\d)(\\\\d)\&quot;) ver)\n       (rest)\n       (clojure.string/join \&quot;.\&quot;)\n       (Float.)))&quot; &quot;(defn fetch-from-url [url]\n  (-&gt;&gt; url\n       java.net.URL.\n       html/html-resource\n       swallow-exceptions))&quot; &quot;(defn fetch-hl7-tree []\n  (fetch-from-url const/hl7-key-tree))&quot; &quot;(fetch-hl7-tree)&quot; &quot;(defn get-hl7-key-list []\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map :content))\n  (map first)\n  (map :content)\n  (map first))&quot; &quot;(defn get-hl7-key-list []\n  (-&gt;&gt; (html/select (fetch-hl7-tree) [:li :li :li :li :a])\n       (map :content)\n       (map first)\n       (map :content)\n       (map first)))&quot; &quot;(get-hl7-key-list)&quot; &quot;(defn make-ver-list []\n  (-&gt;&gt; (range 1 7)\n       (map #(str \&quot;v2\&quot; %))))&quot; &quot;(defn transform-url [ver hl7-key]\n  (-&gt; const/base-url\n      (clojure.string/replace (re-pattern \&quot;\\\\[\\\\w+\\\\]\&quot;) ver)\n      (clojure.string/replace (re-pattern \&quot;\\\\(\\\\w+\\\\)\&quot;) hl7-key)))&quot; &quot;(defn get-data [ver key]\n  (let [raw (-&gt;&gt; (html/select\n                   (fetch-from-url\n                     (transform-url ver key)) [:div.block :ul :li])\n                 (map :content)\n                 (map first)\n                 (map rex/regex-it)\n                 (map first))]\n    (assoc {} key\n              (reduce\n                (fn [obj row]\n                  (assoc obj (swallow-exceptions (parse-int (nth row 3)) ) {:type (nth row 4) :code (nth row 5)})) {} raw))))&quot; &quot;(defn get-by-ver [ver]\n  (let [ver-key (ver-to-float ver)]\n    (assoc {} ver-key\n              (apply merge\n                     (map #(get-data ver %)(get-hl7-key-list))))))&quot; &quot;(defn retrieve-hl7 []\n  (apply merge (map #(get-by-ver %)(make-ver-list))))&quot; &quot;(retrieve-hl7)&quot; &quot;(get-in *1 [2.1 \&quot;IN1\&quot; 7 :type])&quot; &quot;(def test {2.1 {\&quot;IN1\&quot; {7 {:type \&quot;Insurance\&quot; :code \&quot;IN\&quot;}}}})&quot; &quot;(get-in test [2.1])&quot; &quot;(get-in test [2.1 \&quot;IN1\&quot;])&quot; &quot;(get-in test [2.1 \&quot;IN1\&quot; 7])&quot; &quot;(get-in test [2.1 \&quot;IN1\&quot; 7 :type])&quot; &quot;(def hl7-map (retrieve-hl7))&quot; &quot;(get-in hl7-map [2.1])&quot; &quot;(keys hl7-map)&quot; &quot;(2.7 hl7-map)&quot; &quot;(get hl7-map [2.1])&quot; &quot;(get test [2.1])&quot; &quot;(get test 2.1)&quot; &quot;(get hl7-map 2.1)&quot; &quot;(map val (keys hl7-map))&quot; &quot;(doc val)&quot; &quot;(map type (keys hl7-map))&quot;], :remote []}}</component>
</project>